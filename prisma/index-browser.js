
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  externalId: 'externalId',
  mondayUserId: 'mondayUserId',
  copilotUserId: 'copilotUserId',
  emailVerified: 'emailVerified',
  profileImage: 'profileImage',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  access_token: 'access_token',
  refresh_token: 'refresh_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  systemPrompt: 'systemPrompt',
  isActive: 'isActive',
  userId: 'userId',
  userName: 'userName',
  userEmail: 'userEmail',
  ipAddress: 'ipAddress',
  location: 'location',
  source: 'source',
  category: 'category',
  mondayItemId: 'mondayItemId',
  mondaySynced: 'mondaySynced',
  copilotSynced: 'copilotSynced',
  databaseSynced: 'databaseSynced',
  lastMondaySync: 'lastMondaySync',
  lastCopilotSync: 'lastCopilotSync'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  timestamp: 'timestamp',
  isError: 'isError',
  userId: 'userId',
  functionName: 'functionName',
  functionArgs: 'functionArgs'
};

exports.Prisma.SessionTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.BulkOrderScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  status: 'status',
  totalItems: 'totalItems',
  totalQuantity: 'totalQuantity',
  totalValue: 'totalValue',
  warehousesInvolved: 'warehousesInvolved',
  priority: 'priority',
  paymentTerms: 'paymentTerms',
  requestedDeliveryDate: 'requestedDeliveryDate',
  notes: 'notes',
  routingData: 'routingData',
  pricingData: 'pricingData',
  currentStage: 'currentStage',
  progressPercentage: 'progressPercentage',
  individualOrderIds: 'individualOrderIds',
  completedOrderCount: 'completedOrderCount',
  failedOrderCount: 'failedOrderCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  estimatedCompletion: 'estimatedCompletion',
  actualCompletion: 'actualCompletion'
};

exports.Prisma.BulkOrderItemScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  productId: 'productId',
  sku: 'sku',
  name: 'name',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  lineTotal: 'lineTotal',
  specifications: 'specifications',
  customizations: 'customizations',
  notes: 'notes',
  status: 'status',
  processedAt: 'processedAt',
  warehouseId: 'warehouseId'
};

exports.Prisma.BulkOrderReservationScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  warehouseId: 'warehouseId',
  productId: 'productId',
  quantity: 'quantity',
  reservationId: 'reservationId',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.BulkOrderProgressScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  stage: 'stage',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  details: 'details',
  errors: 'errors',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BulkOrderNotificationScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  type: 'type',
  title: 'title',
  message: 'message',
  severity: 'severity',
  actionRequired: 'actionRequired',
  actionUrl: 'actionUrl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.BulkOrderTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  supplierId: 'supplierId',
  items: 'items',
  defaultDeliveryAddress: 'defaultDeliveryAddress',
  preferredWarehouses: 'preferredWarehouses',
  paymentTerms: 'paymentTerms',
  notes: 'notes',
  isPublic: 'isPublic',
  usageCount: 'usageCount',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BulkOrderScheduleScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  templateId: 'templateId',
  supplierId: 'supplierId',
  frequency: 'frequency',
  interval: 'interval',
  dayOfWeek: 'dayOfWeek',
  dayOfMonth: 'dayOfMonth',
  time: 'time',
  timezone: 'timezone',
  nextRun: 'nextRun',
  lastRun: 'lastRun',
  status: 'status',
  failureCount: 'failureCount',
  maxFailures: 'maxFailures',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BulkOrderApprovalScalarFieldEnum = {
  id: 'id',
  bulkOrderId: 'bulkOrderId',
  requiredApprovals: 'requiredApprovals',
  currentApprovals: 'currentApprovals',
  status: 'status',
  autoApproval: 'autoApproval',
  approvalDeadline: 'approvalDeadline',
  escalationRules: 'escalationRules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.BulkOrderMetricsScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  warehouseId: 'warehouseId',
  date: 'date',
  period: 'period',
  totalBulkOrders: 'totalBulkOrders',
  totalItems: 'totalItems',
  totalValue: 'totalValue',
  averageOrderSize: 'averageOrderSize',
  averageProcessingTime: 'averageProcessingTime',
  successRate: 'successRate',
  averageDiscount: 'averageDiscount',
  warehouseUtilization: 'warehouseUtilization',
  inventoryTurnover: 'inventoryTurnover',
  customerSatisfaction: 'customerSatisfaction',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.OrderIntegrationScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  integrationId: 'integrationId',
  supplierId: 'supplierId',
  supplierName: 'supplierName',
  warehouseId: 'warehouseId',
  warehouseName: 'warehouseName',
  status: 'status',
  priority: 'priority',
  urgency: 'urgency',
  itemCount: 'itemCount',
  totalQuantity: 'totalQuantity',
  totalValue: 'totalValue',
  currency: 'currency',
  subtotal: 'subtotal',
  discountPercentage: 'discountPercentage',
  discountAmount: 'discountAmount',
  discountTier: 'discountTier',
  volumeDiscountApplied: 'volumeDiscountApplied',
  shippingMethod: 'shippingMethod',
  shippingCost: 'shippingCost',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  authorizationId: 'authorizationId',
  transactionId: 'transactionId',
  carrier: 'carrier',
  trackingNumber: 'trackingNumber',
  trackingUrl: 'trackingUrl',
  customerNotes: 'customerNotes',
  internalNotes: 'internalNotes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmedAt: 'confirmedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt'
};

exports.Prisma.OrderIntegrationItemScalarFieldEnum = {
  id: 'id',
  orderIntegrationId: 'orderIntegrationId',
  productId: 'productId',
  sku: 'sku',
  name: 'name',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  lineTotal: 'lineTotal',
  warehouseLocation: 'warehouseLocation',
  inventoryReserved: 'inventoryReserved',
  reservationId: 'reservationId',
  specifications: 'specifications',
  isHazardous: 'isHazardous',
  fulfillmentStatus: 'fulfillmentStatus',
  fulfilledQuantity: 'fulfilledQuantity',
  backorderedQuantity: 'backorderedQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reservedAt: 'reservedAt',
  fulfilledAt: 'fulfilledAt'
};

exports.Prisma.OrderIntegrationTrackingScalarFieldEnum = {
  id: 'id',
  orderIntegrationId: 'orderIntegrationId',
  eventType: 'eventType',
  status: 'status',
  location: 'location',
  description: 'description',
  carrier: 'carrier',
  trackingNumber: 'trackingNumber',
  city: 'city',
  state: 'state',
  country: 'country',
  facilityType: 'facilityType',
  deliveryAttempts: 'deliveryAttempts',
  signedBy: 'signedBy',
  deliveryLocation: 'deliveryLocation',
  metadata: 'metadata',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.OrderIntegrationStatusHistoryScalarFieldEnum = {
  id: 'id',
  orderIntegrationId: 'orderIntegrationId',
  previousStatus: 'previousStatus',
  newStatus: 'newStatus',
  reason: 'reason',
  triggeredBy: 'triggeredBy',
  warehouseId: 'warehouseId',
  systemSource: 'systemSource',
  metadata: 'metadata',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.OrderIntegrationReservationScalarFieldEnum = {
  id: 'id',
  orderIntegrationId: 'orderIntegrationId',
  warehouseId: 'warehouseId',
  productId: 'productId',
  sku: 'sku',
  quantity: 'quantity',
  reservationId: 'reservationId',
  status: 'status',
  priority: 'priority',
  reservedAt: 'reservedAt',
  expiresAt: 'expiresAt',
  releasedAt: 'releasedAt',
  fulfilledAt: 'fulfilledAt'
};

exports.Prisma.OrderIntegrationConfigurationScalarFieldEnum = {
  id: 'id',
  configType: 'configType',
  warehouseId: 'warehouseId',
  carrier: 'carrier',
  paymentMethod: 'paymentMethod',
  configuration: 'configuration',
  version: 'version',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expirationDate: 'expirationDate',
  reason: 'reason',
  approvedBy: 'approvedBy',
  rollbackPlan: 'rollbackPlan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderIntegrationMetricsScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  warehouseId: 'warehouseId',
  carrier: 'carrier',
  date: 'date',
  period: 'period',
  totalOrders: 'totalOrders',
  totalItems: 'totalItems',
  totalValue: 'totalValue',
  averageOrderValue: 'averageOrderValue',
  averageProcessingTime: 'averageProcessingTime',
  successRate: 'successRate',
  errorRate: 'errorRate',
  fulfillmentRate: 'fulfillmentRate',
  averageShippingTime: 'averageShippingTime',
  onTimeDeliveryRate: 'onTimeDeliveryRate',
  averageDiscount: 'averageDiscount',
  totalDiscountAmount: 'totalDiscountAmount',
  revenueGrowth: 'revenueGrowth',
  warehouseUtilization: 'warehouseUtilization',
  inventoryTurnover: 'inventoryTurnover',
  customerSatisfaction: 'customerSatisfaction',
  statusCounts: 'statusCounts',
  warehouseCounts: 'warehouseCounts',
  carrierCounts: 'carrierCounts',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.MondaySyncScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  itemId: 'itemId',
  boardId: 'boardId',
  lastSynced: 'lastSynced'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  taxId: 'taxId',
  phoneNumber: 'phoneNumber',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  category: 'category',
  basePrice: 'basePrice',
  currency: 'currency',
  specifications: 'specifications',
  images: 'images',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerId: 'customerId',
  status: 'status',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  total: 'total',
  currency: 'currency',
  shippingAddress: 'shippingAddress',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  paymentStatus: 'paymentStatus',
  paymentIntentId: 'paymentIntentId',
  paidAt: 'paidAt',
  customerNotes: 'customerNotes',
  internalNotes: 'internalNotes',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  productSnapshot: 'productSnapshot',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  status: 'status',
  planId: 'planId',
  billingCycle: 'billingCycle',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  nextBillingDate: 'nextBillingDate',
  stripeSubscriptionId: 'stripeSubscriptionId',
  metadata: 'metadata',
  cancelledAt: 'cancelledAt',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  features: 'features',
  limits: 'limits',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  customerId: 'customerId',
  type: 'type',
  subscriptionId: 'subscriptionId',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  paymentIntentId: 'paymentIntentId',
  paymentMethod: 'paymentMethod',
  pdfUrl: 'pdfUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  stripePaymentMethodId: 'stripePaymentMethodId',
  type: 'type',
  last4: 'last4',
  brand: 'brand',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  location: 'location',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  availableQuantity: 'availableQuantity',
  reorderPoint: 'reorderPoint',
  reorderQuantity: 'reorderQuantity',
  batchNumber: 'batchNumber',
  serialNumbers: 'serialNumbers',
  lastRestocked: 'lastRestocked',
  lastCounted: 'lastCounted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedQuoteScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  customerId: 'customerId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  userId: 'userId',
  items: 'items',
  quantities: 'quantities',
  subtotal: 'subtotal',
  discountAmount: 'discountAmount',
  discountPercentage: 'discountPercentage',
  total: 'total',
  currency: 'currency',
  status: 'status',
  validUntil: 'validUntil',
  convertedToOrderId: 'convertedToOrderId',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  previousPrice: 'previousPrice',
  currency: 'currency',
  reason: 'reason',
  effectiveFrom: 'effectiveFrom',
  effectiveUntil: 'effectiveUntil',
  createdAt: 'createdAt'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  responseTime: 'responseTime',
  errorRate: 'errorRate',
  uptime: 'uptime',
  message: 'message',
  lastCheck: 'lastCheck',
  nextCheck: 'nextCheck',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  channel: 'channel',
  read: 'read',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  eventName: 'eventName',
  eventCategory: 'eventCategory',
  eventData: 'eventData',
  dataPoints: 'dataPoints',
  context: 'context',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  visitorId: 'visitorId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  pageViews: 'pageViews',
  events: 'events',
  bounced: 'bounced',
  source: 'source',
  medium: 'medium',
  campaign: 'campaign',
  content: 'content',
  term: 'term',
  deviceType: 'deviceType',
  deviceBrand: 'deviceBrand',
  browser: 'browser',
  os: 'os',
  screenResolution: 'screenResolution',
  country: 'country',
  region: 'region',
  city: 'city',
  engagementScore: 'engagementScore',
  conversionValue: 'conversionValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsMetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  category: 'category',
  calculation: 'calculation',
  dailyValues: 'dailyValues',
  weeklyValues: 'weeklyValues',
  monthlyValues: 'monthlyValues',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsCohortScalarFieldEnum = {
  id: 'id',
  name: 'name',
  definition: 'definition',
  userCount: 'userCount',
  retentionData: 'retentionData',
  engagementData: 'engagementData',
  revenueData: 'revenueData',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsFunnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  steps: 'steps',
  conversionRates: 'conversionRates',
  dropoffRates: 'dropoffRates',
  avgTimePerStep: 'avgTimePerStep',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsAttributionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  conversionId: 'conversionId',
  conversionType: 'conversionType',
  conversionValue: 'conversionValue',
  touchpoints: 'touchpoints',
  model: 'model',
  channelWeights: 'channelWeights',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  conditions: 'conditions',
  userCount: 'userCount',
  avgEngagement: 'avgEngagement',
  avgRevenue: 'avgRevenue',
  conversionRate: 'conversionRate',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  definition: 'definition',
  schedule: 'schedule',
  lastRun: 'lastRun',
  nextRun: 'nextRun',
  recipients: 'recipients',
  format: 'format',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PerformanceMetricScalarFieldEnum = {
  id: 'id',
  warehouseId: 'warehouseId',
  metricType: 'metricType',
  value: 'value',
  target: 'target',
  variance: 'variance',
  trend: 'trend',
  period: 'period',
  recordedAt: 'recordedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ExecutiveKPIScalarFieldEnum = {
  id: 'id',
  kpiName: 'kpiName',
  warehouseId: 'warehouseId',
  currentValue: 'currentValue',
  targetValue: 'targetValue',
  variancePercentage: 'variancePercentage',
  trend: 'trend',
  sparklineData: 'sparklineData',
  lastUpdated: 'lastUpdated',
  drillDownUrl: 'drillDownUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PerformanceDashboardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dashboardType: 'dashboardType',
  configuration: 'configuration',
  summary: 'summary',
  kpis: 'kpis',
  warehouseComparison: 'warehouseComparison',
  realTimeMetrics: 'realTimeMetrics',
  generatedAt: 'generatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RealtimeMetricScalarFieldEnum = {
  id: 'id',
  warehouseId: 'warehouseId',
  metricName: 'metricName',
  value: 'value',
  unit: 'unit',
  timestamp: 'timestamp'
};

exports.Prisma.PerformanceAlertScalarFieldEnum = {
  id: 'id',
  warehouseId: 'warehouseId',
  metricType: 'metricType',
  alertType: 'alertType',
  severity: 'severity',
  message: 'message',
  threshold: 'threshold',
  currentValue: 'currentValue',
  isResolved: 'isResolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.QuizSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  quizId: 'quizId',
  source: 'source',
  utmSource: 'utmSource',
  utmMedium: 'utmMedium',
  utmCampaign: 'utmCampaign',
  utmContent: 'utmContent',
  contentId: 'contentId',
  campaignId: 'campaignId',
  deviceInfo: 'deviceInfo',
  landingPage: 'landingPage',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  status: 'status',
  createdAt: 'createdAt',
  startTime: 'startTime',
  endTime: 'endTime',
  completionRate: 'completionRate',
  userName: 'userName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  companyName: 'companyName',
  userType: 'userType',
  selectedBrand: 'selectedBrand',
  userSegment: 'userSegment',
  crewSize: 'crewSize',
  leadQualityScore: 'leadQualityScore',
  version: 'version'
};

exports.Prisma.QuizResponseScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  questionId: 'questionId',
  questionType: 'questionType',
  responseValue: 'responseValue',
  responseTime: 'responseTime',
  createdAt: 'createdAt'
};

exports.Prisma.BehavioralInteractionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  interactionType: 'interactionType',
  element: 'element',
  position: 'position',
  viewport: 'viewport',
  duration: 'duration',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.QuizConversionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  conversionType: 'conversionType',
  conversionValue: 'conversionValue',
  orderId: 'orderId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ABTestExperimentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  testType: 'testType',
  control: 'control',
  variants: 'variants',
  allocation: 'allocation',
  metrics: 'metrics',
  results: 'results',
  winner: 'winner',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizBrandScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  name: 'name',
  displayName: 'displayName',
  color: 'color',
  voltage: 'voltage',
  voltageOptions: 'voltageOptions',
  marketShare: 'marketShare',
  popularWith: 'popularWith',
  category: 'category',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.QuizRoutingRuleScalarFieldEnum = {
  id: 'id',
  userType: 'userType',
  brand: 'brand',
  trade: 'trade',
  nextQuestionId: 'nextQuestionId',
  condition: 'condition',
  priority: 'priority',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.QuizInterventionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  interventionType: 'interventionType',
  triggerReason: 'triggerReason',
  questionId: 'questionId',
  shownAt: 'shownAt',
  userAction: 'userAction',
  actionTimestamp: 'actionTimestamp'
};

exports.Prisma.UserBehaviorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  timestamp: 'timestamp',
  event: 'event',
  data: 'data',
  context: 'context',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  startTime: 'startTime',
  lastActivity: 'lastActivity',
  eventCount: 'eventCount',
  device: 'device',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductMetricsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  views: 'views',
  clicks: 'clicks',
  addToCarts: 'addToCarts',
  purchases: 'purchases',
  revenue: 'revenue',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ProductInventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.UserPurchaseHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  orderId: 'orderId',
  invoiceId: 'invoiceId',
  type: 'type',
  filename: 'filename',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  name: 'name',
  company: 'company',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  phone: 'phone',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DealerSubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  tier: 'tier',
  status: 'status',
  volumeCommitment: 'volumeCommitment',
  discountRate: 'discountRate',
  paymentTerms: 'paymentTerms',
  creditLimit: 'creditLimit',
  startDate: 'startDate',
  endDate: 'endDate',
  nextReviewDate: 'nextReviewDate',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingRecordScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  subscriptionId: 'subscriptionId',
  orderId: 'orderId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  status: 'status',
  processedAt: 'processedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  url: 'url',
  events: 'events',
  secret: 'secret',
  isActive: 'isActive',
  lastDeliveryAt: 'lastDeliveryAt',
  successCount: 'successCount',
  failureCount: 'failureCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BackgroundJobScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  priority: 'priority',
  payload: 'payload',
  result: 'result',
  scheduledFor: 'scheduledFor',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  nextRetryAt: 'nextRetryAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  ticketNumber: 'ticketNumber',
  supplierId: 'supplierId',
  title: 'title',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  warehouseId: 'warehouseId',
  orderId: 'orderId',
  productId: 'productId',
  assignedTo: 'assignedTo',
  resolution: 'resolution',
  escalationLevel: 'escalationLevel',
  lastActivityAt: 'lastActivityAt',
  resolvedAt: 'resolvedAt',
  closedAt: 'closedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketCommentScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  authorId: 'authorId',
  authorType: 'authorType',
  content: 'content',
  isInternal: 'isInternal',
  createdAt: 'createdAt'
};

exports.Prisma.TicketAttachmentScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  commentId: 'commentId',
  filename: 'filename',
  originalFilename: 'originalFilename',
  url: 'url',
  size: 'size',
  mimeType: 'mimeType',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.RHYNotificationPreferencesScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  pushEnabled: 'pushEnabled',
  inAppEnabled: 'inAppEnabled',
  warehouseAlerts: 'warehouseAlerts',
  orderUpdates: 'orderUpdates',
  systemNotifications: 'systemNotifications',
  securityAlerts: 'securityAlerts',
  promotionalContent: 'promotionalContent',
  quietHours: 'quietHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  OAuthAccount: 'OAuthAccount',
  ChatSession: 'ChatSession',
  Message: 'Message',
  SessionTag: 'SessionTag',
  BulkOrder: 'BulkOrder',
  BulkOrderItem: 'BulkOrderItem',
  BulkOrderReservation: 'BulkOrderReservation',
  BulkOrderProgress: 'BulkOrderProgress',
  BulkOrderNotification: 'BulkOrderNotification',
  BulkOrderTemplate: 'BulkOrderTemplate',
  BulkOrderSchedule: 'BulkOrderSchedule',
  BulkOrderApproval: 'BulkOrderApproval',
  BulkOrderMetrics: 'BulkOrderMetrics',
  OrderIntegration: 'OrderIntegration',
  OrderIntegrationItem: 'OrderIntegrationItem',
  OrderIntegrationTracking: 'OrderIntegrationTracking',
  OrderIntegrationStatusHistory: 'OrderIntegrationStatusHistory',
  OrderIntegrationReservation: 'OrderIntegrationReservation',
  OrderIntegrationConfiguration: 'OrderIntegrationConfiguration',
  OrderIntegrationMetrics: 'OrderIntegrationMetrics',
  MondaySync: 'MondaySync',
  Customer: 'Customer',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Subscription: 'Subscription',
  SubscriptionPlan: 'SubscriptionPlan',
  Invoice: 'Invoice',
  PaymentMethod: 'PaymentMethod',
  Inventory: 'Inventory',
  Cart: 'Cart',
  SavedQuote: 'SavedQuote',
  CartItem: 'CartItem',
  PriceHistory: 'PriceHistory',
  SystemHealth: 'SystemHealth',
  Notification: 'Notification',
  AnalyticsEvent: 'AnalyticsEvent',
  AnalyticsSession: 'AnalyticsSession',
  AnalyticsMetric: 'AnalyticsMetric',
  AnalyticsCohort: 'AnalyticsCohort',
  AnalyticsFunnel: 'AnalyticsFunnel',
  AnalyticsAttribution: 'AnalyticsAttribution',
  AnalyticsSegment: 'AnalyticsSegment',
  AnalyticsReport: 'AnalyticsReport',
  PerformanceMetric: 'PerformanceMetric',
  ExecutiveKPI: 'ExecutiveKPI',
  PerformanceDashboard: 'PerformanceDashboard',
  RealtimeMetric: 'RealtimeMetric',
  PerformanceAlert: 'PerformanceAlert',
  AuditLog: 'AuditLog',
  QuizSession: 'QuizSession',
  QuizResponse: 'QuizResponse',
  BehavioralInteraction: 'BehavioralInteraction',
  QuizConversion: 'QuizConversion',
  ABTestExperiment: 'ABTestExperiment',
  QuizBrand: 'QuizBrand',
  QuizRoutingRule: 'QuizRoutingRule',
  QuizIntervention: 'QuizIntervention',
  UserBehavior: 'UserBehavior',
  UserSession: 'UserSession',
  ProductMetrics: 'ProductMetrics',
  ProductInventory: 'ProductInventory',
  UserPurchaseHistory: 'UserPurchaseHistory',
  Document: 'Document',
  ShippingAddress: 'ShippingAddress',
  DealerSubscription: 'DealerSubscription',
  BillingRecord: 'BillingRecord',
  Webhook: 'Webhook',
  BackgroundJob: 'BackgroundJob',
  SupportTicket: 'SupportTicket',
  TicketComment: 'TicketComment',
  TicketAttachment: 'TicketAttachment',
  RHYNotificationPreferences: 'RHYNotificationPreferences'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
